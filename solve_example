#sudokusolve

def find_next_empty(puzzle):
#find next row & col on puzzle
#not filled -> -1
    for r in range(9):
        for c in range(9): # range(9) is 0, 1, 2, ... 8
            if puzzle[r][c] == -1:
                return r, c

    return None, None  #if there is no empty

def is_valid(puzzle, guess, row, col):
    #return True if valid
    #False otherwise
    #start with row
    row_vals = puzzle[row]
    if guess in row_vals:
        return False # if we've repeated, then our guess is not valid!

    #and col
    col_vals = [puzzle[i][col] for i in range(9)]
    if guess in col_vals:
        return False

    #and the square
    #3*3 square
    row_start = (row // 3) * 3 # 10 // 3 = 3, 5 // 3 = 1, 1 // 3 = 0
    col_start = (col // 3) * 3

    for r in range(row_start, row_start + 3):
        for c in range(col_start, col_start + 3):
            if puzzle[r][c] == guess:
                return False

    return True

def solve_sudoku(puzzle):
    #using backtracking
    #return whether a solution exist
    
    # phase 1 : choose the puzzle to guess
    row, col = find_next_empty(puzzle)

    #phase 1.1
    if row is None:
        return True 
    
    #phase 2 : there is place to put number between 1 and 9
    for guess in range(1, 10):
        #phase 3 : check valid
        if is_valid(puzzle, guess, row, col):
            puzzle[row][col] = guess
            #phase 4 : recursively call the function
            if solve_sudoku(puzzle):
                return True
        
        #phase 5 : if not valid , backtrack and try a new number
        puzzle[row][col] = -1

        #phase 6 : if none to try , unsolvable puzzle
    return False


if __name__ == '__main__':
    example_board = [
        [4, 9, -1,   1, 5, -1,   -1, 8, 7],
        [5, -1, -1,   3, -1, -1,   -1, -1, 1],
        [-1, 1, -1,   -1, -1, 8,   -1, 6, -1],

        [-1, -1, 4,   -1, -1, -1,   -1, -1, -1],
        [3, -1, -1,   4, -1, 2,   -1, -1, -1],
        [9, 2, -1,   -1, -1, -1,   -1, -1, -1],

        [-1, 5, -1,   6, -1, -1,   -1, 9, -1],
        [8, -1, -1,   -1, -1, 3,   -1, -1, 6],
        [6, 3, -1,   -1, 4, 7,   -1, 5, 2]
    ]
    print(solve_sudoku(example_board))
    
    True
    [[4, 9, 2, 1, 5, 6, 3, 8, 7],
     [5, 6, 8, 3, 7, 4, 9, 2, 1],
     [7, 1, 3, 2, 9, 8, 5, 6, 4],
     [1, 7, 4, 8, 6, 9, 2, 3, 5],
     [3, 8, 5, 4, 1, 2, 6, 7, 9],
     [9, 2, 6, 7, 3, 5, 1, 4, 8],
     [2, 5, 7, 6, 8, 1, 4, 9, 3],
     [8, 4, 9, 5, 2, 3, 7, 1, 6],
     [6, 3, 1, 9, 4, 7, 8, 5, 2]]

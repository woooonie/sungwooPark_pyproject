#sudokusolve

def find_next_empty(puzzle):
#find next row & col on puzzle
#not filled -> -1
    for r in range(9):
        for c in range(9): #range(9) is 0, 1, 2, ... 8
            if puzzle[r][c] == -1:
                return r, c

    return None, None  #if there is no empty

def is_valid(puzzle, guess, row, col):
    #return True if valid
    #False otherwise
    #start with row
    row_vals = puzzle[row]
    if guess in row_vals:
        return False
    
    #and col
    col_vals = [puzzle[i][col] for i in range(9)]
    if guess in col_vals:
        return False
    
    #and the square
    #3*3 square
    row_start = (row // 3) * 3
    col_start = (col // 3) * 3
    
    for r in range(row_start, row_start + 3) :
        for c in range(col_start, col_start + 3) :
            if puzzle[r][c] == guess:
                return False
            
    return True


def solve_sudoku(puzzle):
    #using backtracking
    #return whether a solution exist
    
    # phase 1 : choose the puzzle to guess
    row, col = find_next_empty(puzzle)
    
    #phase 1.1
    if row is None:
        return True
    
    #phase 2 : there is place to put number between 1 and 9
    for guess in range(1, 10): 
        #phase 3 : check valid
        if is_valid(puzzle, guess, row, col):
            puzzle[row][col] = guess
            #phase 4 : recursively call the function
            if solve_sudoku:
                return True
        #phase 5 : if not valid , backtrack and try a new number
        puzzle[row][col] = -1 #reset
    #phase 6 : if none to try , unsolvable puzzle
    return False

            

